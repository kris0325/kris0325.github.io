[{"content":"https://leetcode.com/problems/happy-number/description/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Happy Number Category\tDifficulty\tLikes\tDislikes algorithms\tEasy (56.07%)\t10182\t1411 Tags hash-table | math Companies airbnb | twitter | uber Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not. Example 1: Input: n = 19 Output: true Explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 Example 2: Input: n = 2 Output: false 1 2 3 4 5 6 7 /* * 思路：哈希表 or it loops endlessly in a cycle which does not include 1, 即表明n is happy时, 無限循環，那麼可以推斷，只要紀錄每次循環的sum，總有sum會發生重複， 因此可以使用hashset收集每次循環的sum，然後判斷是否存在重複的值 * */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // @lc code=start import java.util.HashSet; class Solution { public boolean isHappy(int n) { HashSet\u0026lt;Integer\u0026gt; sumsSet = new HashSet\u0026lt;\u0026gt;(); // ishappy n == 1 , is not happy, sum會重複即 sumsSet.contains(n)，跳出 while (n != 1 \u0026amp;\u0026amp; !sumsSet.contains(n)) { sumsSet.add(n); n = getSum(n); } return n == 1; } int getSum(int n){ int sum = 0; while (n \u0026gt; 0) { //先獲取最左邊低位數值 int low = n % 10; sum += low *low; //去掉最左邊低位數值 n = n / 10; } return sum; } } // @lc code=end ","date":"2024-05-10T00:00:00Z","image":"https://example.com/p/202.-happy-number/202_hua62bcbcf9a79dfe26d0875c8d67438b3_9400923_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/202.-happy-number/","title":"202. Happy Number"},{"content":" https://leetcode.com/problems/intersection-of-two-arrays/description/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Intersection of Two Arrays Category\tDifficulty\tLikes\tDislikes algorithms\tEasy (74.44%)\t5958\t2289 Tags hash-table | two-pointers | binary-search | sort Companies twosigma Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order. Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Explanation: [4,9] is also accepted. Constraints: 1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 1000 0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /* 思路：哈希表 使用hashset存nums1的元素, 再遍历nums2收集intersection * */ // @lc code=start import java.util.ArrayList; import java.util.HashSet; class Solution { public int[] intersection(int[] nums1, int[] nums2) { HashSet\u0026lt;Integer\u0026gt; setNums1 = new HashSet\u0026lt;\u0026gt;(); HashSet\u0026lt;Integer\u0026gt; setNums = new HashSet\u0026lt;\u0026gt;(); for(int i = 0; i \u0026lt; nums1.length ; i++){ setNums1.add(nums1[i]); } for(int i = 0; i \u0026lt; nums2.length; i++){ if (setNums1.contains(nums2[i])) { setNums.add(nums2[i]); } } // int [] nums = new int[setNums.size()]; // int index = 0; // for (int num : setNums) { // nums[index++] = num; // } // return nums; return setNums.stream().mapToInt(i -\u0026gt; i).toArray(); } } // @lc code=end ","date":"2024-05-10T00:00:00Z","image":"https://example.com/p/349.-intersection-of-two-arrays/349_hu8e35c18113cfb820c0efc87111a50e50_9589620_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/349.-intersection-of-two-arrays/","title":"349. Intersection of Two Arrays"},{"content":"https://leetcode.com/problems/valid-anagram/description/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 Category\tDifficulty\tLikes\tDislikes algorithms\tEasy (64.48%)\t11937\t394 Tags hash-table | sort Companies amazon | uber | yelp Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: Input: s = \u0026#34;anagram\u0026#34;, t = \u0026#34;nagaram\u0026#34; Output: true Example 2: Input: s = \u0026#34;rat\u0026#34;, t = \u0026#34;car\u0026#34; Output: false Constraints: 1 \u0026lt;= s.length, t.length \u0026lt;= 5 * 104 s and t consist of lowercase English letters. Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case? /* 思路：哈希表 * 异位词，即两个单词/短语s1, s2互为重排，其充要条件是 * 1字符串的字符总数量， * 2以及每个字符对应的数量相同。 * 因此可以使用哈希表分别统计字符串中各个字符数量 key:字符，value:数量， * 统计s1时，value+1， 统计s2时value-1， * 当最终哈希表中所有字符对应的统计数值为0，则互为重排。 */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // @lc code=start import java.util.HashMap; class Solution { public boolean isAnagram(String s, String t) { HashMap\u0026lt;Character, Integer\u0026gt; dic = new HashMap\u0026lt;\u0026gt;(); for(int i = 0; i \u0026lt;s.length(); i++){ dic.put(s.charAt(i), dic.getOrDefault(s.charAt(i), 0)+1); } for(int i = 0; i \u0026lt; t.length(); i++){ dic.put(t.charAt(i), dic.getOrDefault(t.charAt(i), 0)-1); } for(int val : dic.values()){ if(val !=0){ return false; } } return true; } } // @lc code=end ","date":"2024-05-09T00:00:00Z","image":"https://example.com/p/242.-valid-anagram/242_hua62bcbcf9a79dfe26d0875c8d67438b3_3686299_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/242.-valid-anagram/","title":"242. Valid Anagram"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 /* * @lc app=leetcode id=142 lang=java * * [142] Linked List Cycle II * * https://leetcode.com/problems/linked-list-cycle-ii/description/ * * algorithms * Medium (51.25%) * Likes: 13392 * Dislikes: 937 * Total Accepted: 1.3M * Total Submissions: 2.5M * Testcase Example: \u0026#39;[3,2,0,-4]\\n1\u0026#39; * * Given the head of a linked list, return the node where the cycle begins. If * there is no cycle, return null. * * There is a cycle in a linked list if there is some node in the list that can * be reached again by continuously following the next pointer. Internally, pos * is used to denote the index of the node that tail\u0026#39;s next pointer is * connected to (0-indexed). It is -1 if there is no cycle. Note that pos is * not passed as a parameter. * * Do not modify the linked list. * * * Example 1: * * * Input: head = [3,2,0,-4], pos = 1 * Output: tail connects to node index 1 * Explanation: There is a cycle in the linked list, where tail connects to the * second node. * * * Example 2: * * * Input: head = [1,2], pos = 0 * Output: tail connects to node index 0 * Explanation: There is a cycle in the linked list, where tail connects to the * first node. * * * Example 3: * * * Input: head = [1], pos = -1 * Output: no cycle * Explanation: There is no cycle in the linked list. * * * * Constraints: * * * The number of the nodes in the list is in the range [0, 10^4]. * -10^5 \u0026lt;= Node.val \u0026lt;= 10^5 * pos is -1 or a valid index in the linked-list. * * * * Follow up: Can you solve it using O(1) (i.e. constant) memory? * */ // @lc code=start /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } * * 思路：使用弗洛伊德判圈算法，即快慢指針， * 畫圖輔助， * 1若快慢指針能相遇，則存在環， * 2然後設置2個新指針，一個從頭節點開始，另一個指針從相遇節點開始，當兩指針相遇處即為環的入口節點 * 再 * * 使用快慢指针检测链表中循环的原理是一种常见且高效的算法，也被称为Floyd\u0026#39;s Tortoise and Hare Algorithm（弗洛伊德的乌龟和兔子算法）。这种算法通过使用两个指针，一个快指针和一个慢指针，来检测链表中是否存在循环，并找到循环的起始节点。 快慢指针的原理是，快指针每次移动两步，慢指针每次移动一步。如果链表中存在循环，快指针最终会追上慢指针。这是因为快指针的速度是慢指针的两倍，所以在循环中，快指针会绕圈追赶慢指针，最终相遇。 当快慢指针相遇时，我们可以得出以下结论： 链表中存在循环。 通过数学推导，可以确定链表中循环的起始节点。 具体来说，假设链表头到循环起始节点的距离为A，循环起始节点到快慢指针相遇点的距离为B。根据快慢指针的移动规律，可以得出以下等式：快指针走过的距离 = 2 * 慢指针走过的距离。根据这个等式，可以推导出A = C，即链表头到循环起始节点的距离等于相遇点到循环起始节点的距离。 因此，当快慢指针相遇后，我们可以设置一个新的指针从链表头开始，与相遇点的指针同时移动，它们相遇的节点就是循环的起始节点。 通过这种方法，我们可以高效地检测链表中的循环，并找到循环的起始节点，而且算法的时间复杂度为O(N)，空间复杂度为O(1)。 */ public class Solution { public ListNode detectCycle(ListNode head) { ListNode fast = head; ListNode slow = head; //需要确保快指针與快指針的下一个节点不为空，以避免空指针异常 while (fast != null \u0026amp;\u0026amp; fast.next !=null) { fast = fast.next.next; slow = slow.next; //相遇則存在環 if(slow == fast){ ListNode index1 = fast; //在检测到快慢指针相遇时，需要重新设置一个新的指针从头节点开始，以找到循环的入口点 ListNode index2 = head; while (index1 != index2) { index1 = index1.next; index2 = index2.next; } //index1與index2在環的入口處相遇 return index1; } } return null; } } // @lc code=end ","date":"2024-05-07T00:00:00Z","image":"https://example.com/p/142.-linked-list-cycle-ii/142_hua62bcbcf9a79dfe26d0875c8d67438b3_10854839_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/142.-linked-list-cycle-ii/","title":"142. Linked List Cycle II"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 /* * @lc app=leetcode id=19 lang=java * * [19] Remove Nth Node From End of List * * https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/ * * algorithms * Medium (45.25%) * Likes: 18583 * Dislikes: 785 * Total Accepted: 2.7M * Total Submissions: 6M * Testcase Example: \u0026#39;[1,2,3,4,5]\\n2\u0026#39; * * Given the head of a linked list, remove the n^th node from the end of the * list and return its head. * * * Example 1: * * * Input: head = [1,2,3,4,5], n = 2 * Output: [1,2,3,5] * * * Example 2: * * * Input: head = [1], n = 1 * Output: [] * * * Example 3: * * * Input: head = [1,2], n = 1 * Output: [1] * * * * Constraints: * * * The number of nodes in the list is sz. * 1 \u0026lt;= sz \u0026lt;= 30 * 0 \u0026lt;= Node.val \u0026lt;= 100 * 1 \u0026lt;= n \u0026lt;= sz * * * * Follow up: Could you do this in one pass? * */ // @lc code=start /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } * * 思路：快慢指针 * 快指针先走步长n，然后慢指针后走，当快指针走到末尾， * 慢指针即指向倒数第n个节点the n^th node from the end of the. * 注意：邊界條件 * * solution優化：使用虛擬头節點dumyNode更方便，可以覆蓋邊界條件，不用特殊考慮 * * * * * * * list，remove即可 */ class Solution1 { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode fast = head; ListNode slow = head; //specil case: only one node if(slow.next == null){ return null; } for(int i = 0; i \u0026lt;n; i++){ fast = fast.next; } //specil case: when n == size of the list, the fast pointer is null, it means we need remove the head node if(fast == null){ return head.next; } while (fast.next != null) { fast = fast.next; slow = slow.next; } //At this point, the slow pointer is n nodes behind the fast pointer //, which means it\u0026#39;s pointing to the node just before the node we want to remove. //delete the n^th node from the end of the list slow.next = slow.next.next; return head; } } class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { //新建一个虚拟头节点指向head ListNode dummyNode = new ListNode(0); dummyNode.next = head; //快慢指针指向虚拟头节点 ListNode fastIndex = dummyNode; ListNode slowIndex = dummyNode; // 只要快慢指针相差 n 个结点即可 for (int i = 0; i \u0026lt;= n; i++) { fastIndex = fastIndex.next; } while (fastIndex != null) { fastIndex = fastIndex.next; slowIndex = slowIndex.next; } // 此时 slowIndex 的位置就是待删除元素的前一个位置。 // 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解 // 检查 slowIndex.next 是否为 null，以避免空指针异常 if (slowIndex.next != null) { slowIndex.next = slowIndex.next.next; } return dummyNode.next; } } // @lc code=end ","date":"2024-05-06T00:00:00Z","image":"https://example.com/p/19.-remove-nth-node-from-end-of-list/19_hua62bcbcf9a79dfe26d0875c8d67438b3_13769621_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/19.-remove-nth-node-from-end-of-list/","title":"19. Remove Nth Node From End of List"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 /* * @lc app=leetcode id=160 lang=java * * [160] Intersection of Two Linked Lists * * https://leetcode.com/problems/intersection-of-two-linked-lists/description/ * * algorithms * Easy (57.40%) * Likes: 14737 * Dislikes: 1327 * Total Accepted: 1.5M * Total Submissions: 2.7M * Testcase Example: \u0026#39;8\\n[4,1,8,4,5]\\n[5,6,1,8,4,5]\\n2\\n3\u0026#39; * * Given the heads of two singly linked-lists headA and headB, return the node * at which the two lists intersect. If the two linked lists have no * intersection at all, return null. * * For example, the following two linked lists begin to intersect at node c1: * * The test cases are generated such that there are no cycles anywhere in the * entire linked structure. * * Note that the linked lists must retain their original structure after the * function returns. * * Custom Judge: * * The inputs to the judge are given as follows (your program is not given * these inputs): * * * intersectVal - The value of the node where the intersection occurs. This is * 0 if there is no intersected node. * listA - The first linked list. * listB - The second linked list. * skipA - The number of nodes to skip ahead in listA (starting from the head) * to get to the intersected node. * skipB - The number of nodes to skip ahead in listB (starting from the head) * to get to the intersected node. * * * The judge will then create the linked structure based on these inputs and * pass the two heads, headA and headB to your program. If you correctly return * the intersected node, then your solution will be accepted. * * * Example 1: * * * Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = * 2, skipB = 3 * Output: Intersected at \u0026#39;8\u0026#39; * Explanation: The intersected node\u0026#39;s value is 8 (note that this must not be 0 * if the two lists intersect). * From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as * [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are * 3 nodes before the intersected node in B. * - Note that the intersected node\u0026#39;s value is not 1 because the nodes with * value 1 in A and B (2^nd node in A and 3^rd node in B) are different node * references. In other words, they point to two different locations in memory, * while the nodes with value 8 in A and B (3^rd node in A and 4^th node in B) * point to the same location in memory. * * * Example 2: * * * Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, * skipB = 1 * Output: Intersected at \u0026#39;2\u0026#39; * Explanation: The intersected node\u0026#39;s value is 2 (note that this must not be 0 * if the two lists intersect). * From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as * [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 * node before the intersected node in B. * * * Example 3: * * * Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = * 2 * Output: No intersection * Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it * reads as [1,5]. Since the two lists do not intersect, intersectVal must be * 0, while skipA and skipB can be arbitrary values. * Explanation: The two lists do not intersect, so return null. * * * * Constraints: * * * The number of nodes of listA is in the m. * The number of nodes of listB is in the n. * 1 \u0026lt;= m, n \u0026lt;= 3 * 10^4 * 1 \u0026lt;= Node.val \u0026lt;= 10^5 * 0 \u0026lt;= skipA \u0026lt; m * 0 \u0026lt;= skipB \u0026lt; n * intersectVal is 0 if listA and listB do not intersect. * intersectVal == listA[skipA] == listB[skipB] if listA and listB * intersect. * * * * Follow up: Could you write a solution that runs in O(m + n) time and use * only O(1) memory? */ // @lc code=start /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } * * 思路1：两个链表若有交点，从链表末尾向前看，必有一段公共节点，因此， * 先求出2个链表长度差gap, 长链表指针先走gap步长，直到长短两个链表位置对齐， * 同时移动长短链表的指针，直到两个指针相等，return， * 否则return null * */ // public class Solution { // public ListNode getIntersectionNode(ListNode headA, ListNode headB) { // int lenA =0; // int lenB =0; // ListNode nodeA = headA; // ListNode nodeB = headB; // while (nodeA != null) { // nodeA = nodeA.next; // lenA +=1; // } // while (nodeB != null) { // nodeB = nodeB.next; // lenB +=1; // } // nodeA = headA; // nodeB = headB; // if(lenB \u0026gt; lenA){ // int tmplen = lenA; // lenA = lenB; // lenB = tmplen; // ListNode nodetmp = nodeA; // nodeA = nodeB; // nodeB = nodetmp; // } // int gap = lenA -lenB; // while (gap-- \u0026gt; 0) { // nodeA = nodeA.next; // } // while (nodeA != null) { // if(nodeA == nodeB){ // return nodeA; // } // nodeA = nodeA.next; // nodeB = nodeB.next; // } // return null; // } // } /* 思路2：合并链表，同步移动指针寻找公共节点 本质上和思路1是一样的，就是指向短链表的快指针先走， 直到走完（两个链表长度之差）gap步长后， 这时快慢指针同步移动，再寻找公共节点 * * */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { ListNode pA = headA; ListNode pB = headB; while(pA != pB){ if(pA == null){ //指针pA走一步，直到走到a链表末尾，则转到b链表 pA = headB; } else { pA = pA.next; } //指针pB走一步，直到走到B链表末尾，则转到A链表 if(pB == null){ pB = headA; } else{ pB = pB.next; } } return pA; } } // @lc code=end ","date":"2024-05-03T00:00:00Z","image":"https://example.com/p/160.-intersection-of-two-linked-lists/160_hua62bcbcf9a79dfe26d0875c8d67438b3_9016474_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/160.-intersection-of-two-linked-lists/","title":"160. Intersection of Two Linked Lists"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 /* * @lc app=leetcode id=24 lang=java * * [24] Swap Nodes in Pairs * * https://leetcode.com/problems/swap-nodes-in-pairs/description/ * * algorithms * Medium (64.32%) * Likes: 11816 * Dislikes: 436 * Total Accepted: 1.4M * Total Submissions: 2.1M * Testcase Example: \u0026#39;[1,2,3,4]\u0026#39; * * Given a linked list, swap every two adjacent nodes and return its head. You * must solve the problem without modifying the values in the list\u0026#39;s nodes * (i.e., only nodes themselves may be changed.) * * * Example 1: * * * Input: head = [1,2,3,4] * Output: [2,1,4,3] * * * Example 2: * * * Input: head = [] * Output: [] * * * Example 3: * * * Input: head = [1] * Output: [1] * * * * Constraints: * * * The number of nodes in the list is in the range [0, 100]. * 0 \u0026lt;= Node.val \u0026lt;= 100 * * */ // @lc code=start /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } 思路：正常模拟就行，注意断开指针的顺序 */ class Solution { public ListNode swapPairs(ListNode head) { //设置一个虚拟头节点 ListNode dumyHead = new ListNode(0); //将虚拟头结点指向head，这样方便后面操作 dumyHead.next = head; ListNode cur = dumyHead; //临时节点，保存两个节点之中的第一个节点 ListNode firstNode ; // 临时节点，保存两个节点之中的第二个节点 ListNode secondeNode ; while (cur.next != null \u0026amp;\u0026amp; cur.next.next != null) { // tmpNode = cur.next.next.next; firstNode = cur.next; secondeNode = cur.next.next; //1 cur指针next指向第2个节点 cur.next = secondeNode; //2 第一个节点指针next指向第三个节点 firstNode.next = secondeNode.next; //3 第二个节点指针next指向第一个节点 secondeNode.next = firstNode; //移动cur指针，准备下一轮交换 cur = cur.next.next; } return dumyHead.next; } } // @lc code=end ","date":"2024-05-03T00:00:00Z","image":"https://example.com/p/24.-swap-nodes-in-pairs/24_hua62bcbcf9a79dfe26d0875c8d67438b3_9882202_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/24.-swap-nodes-in-pairs/","title":"24. Swap Nodes in Pairs"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 /* * @lc app=leetcode.cn id=707 lang=java * * [707] 设计链表 * * https://leetcode.cn/problems/design-linked-list/description/ * * algorithms * Medium (34.47%) * Likes: 1013 * Dislikes: 0 * Total Accepted: 302.8K * Total Submissions: 879.7K * Testcase Example: \u0026#39;[\u0026#34;MyLinkedList\u0026#34;,\u0026#34;addAtHead\u0026#34;,\u0026#34;addAtTail\u0026#34;,\u0026#34;addAtIndex\u0026#34;,\u0026#34;get\u0026#34;,\u0026#34;deleteAtIndex\u0026#34;,\u0026#34;get\u0026#34;]\\n\u0026#39; + \u0026#39;[[],[1],[3],[1,2],[1],[1],[1]]\u0026#39; * * 你可以选择使用单链表或者双链表，设计并实现自己的链表。 * * 单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针/引用。 * * 如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。 * * 实现 MyLinkedList 类： * * * MyLinkedList() 初始化 MyLinkedList 对象。 * int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。 * void addAtHead(int val) 将一个值为 val * 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。 * void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。 * void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 * index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。 * void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。 * * * * * 示例： * * * 输入 * [\u0026#34;MyLinkedList\u0026#34;, \u0026#34;addAtHead\u0026#34;, \u0026#34;addAtTail\u0026#34;, \u0026#34;addAtIndex\u0026#34;, \u0026#34;get\u0026#34;, * \u0026#34;deleteAtIndex\u0026#34;, \u0026#34;get\u0026#34;] * [[], [1], [3], [1, 2], [1], [1], [1]] * 输出 * [null, null, null, null, 2, null, 3] * * 解释 * MyLinkedList myLinkedList = new MyLinkedList(); * myLinkedList.addAtHead(1); * myLinkedList.addAtTail(3); * myLinkedList.addAtIndex(1, 2); // 链表变为 1-\u0026gt;2-\u0026gt;3 * myLinkedList.get(1); // 返回 2 * myLinkedList.deleteAtIndex(1); // 现在，链表变为 1-\u0026gt;3 * myLinkedList.get(1); // 返回 3 * * * * * 提示： * * * 0 \u0026lt;= index, val \u0026lt;= 1000 * 请不要使用内置的 LinkedList 库。 * 调用 get、addAtHead、addAtTail、addAtIndex 和 deleteAtIndex 的次数不超过 2000 。 * * */ // @lc code=start class ListNode { int val; ListNode next; ListNode(){}; ListNode(int val){ this.val = val; }; } class MyLinkedList { int size; ListNode head; public MyLinkedList() { size = 0; head = new ListNode(0); } public int get(int index) { if(index \u0026lt; 0 || index \u0026gt;= size){ return -1; } ListNode cur = head; for(int i = 0; i \u0026lt;= index; i++){ cur = cur.next; } return cur.val; } public void addAtHead(int val) { addAtIndex(0, val); } public void addAtTail(int val) { addAtIndex(size, val); } public void addAtIndex(int index, int val) { if(index \u0026gt; size){ return; } if(index \u0026lt; 0){ index = 0; } size++; //寻找到要插入节点的前驱 ListNode pre = head; for(int i = 0; i\u0026lt;index; i++){ pre = pre.next; } ListNode target = new ListNode(val); target.next = pre.next; pre.next = target; } //删除第index节点 public void deleteAtIndex(int index) { if(index \u0026gt;= size || index \u0026lt;0){ return; } size--; ListNode pre = head; for(int i =0; i\u0026lt;index;i++ ){ pre = pre.next; } pre.next = pre.next.next; } } /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index,val); * obj.deleteAtIndex(index); */ // @lc code=end ","date":"2024-04-14T00:00:00Z","image":"https://example.com/p/707.-design-linked-list/707_hu5477be140e37c38e9e48439fae2f6b6b_3708872_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/707.-design-linked-list/","title":"707. Design Linked List"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 /* * @lc app=leetcode.cn id=206 lang=java * * [206] 反转链表 * * https://leetcode.cn/problems/reverse-linked-list/description/ * * algorithms * Easy (74.06%) * Likes: 3545 * Dislikes: 0 * Total Accepted: 1.8M * Total Submissions: 2.5M * Testcase Example: \u0026#39;[1,2,3,4,5]\u0026#39; * * 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 * * * * * 示例 1： * * * 输入：head = [1,2,3,4,5] * 输出：[5,4,3,2,1] * * * 示例 2： * * * 输入：head = [1,2] * 输出：[2,1] * * * 示例 3： * * * 输入：head = [] * 输出：[] * * * * * 提示： * * * 链表中节点的数目范围是 [0, 5000] * -5000 * * * * * 进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？ * * * */ // @lc code=start /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } * * 思路：双指针，迭代翻转链表 */ class Solution { public ListNode reverseList(ListNode head) { ListNode pre = null; ListNode cur = head; while (cur!= null) { //保存下一个节点 ListNode tmp = cur.next; //翻转操作，即断开当前指针并指向前一个指针 cur.next = pre; //向后移动 pre, cur指针 pre = cur; cur = tmp; } return pre; } } // @lc code=end ","date":"2024-04-06T00:00:00Z","image":"https://example.com/p/206.-reverse-linked-list/206_hu5477be140e37c38e9e48439fae2f6b6b_11654075_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/206.-reverse-linked-list/","title":"206. Reverse Linked List"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 /* * @lc app=leetcode.cn id=203 lang=java * * [203] 移除链表元素 * * https://leetcode.cn/problems/remove-linked-list-elements/description/ * * algorithms * Easy (56.20%) * Likes: 1404 * Dislikes: 0 * Total Accepted: 706.2K * Total Submissions: 1.3M * Testcase Example: \u0026#39;[1,2,6,3,4,5,6]\\n6\u0026#39; * * 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 * * * 示例 1： * * * 输入：head = [1,2,6,3,4,5,6], val = 6 * 输出：[1,2,3,4,5] * * * 示例 2： * * * 输入：head = [], val = 1 * 输出：[] * * * 示例 3： * * * 输入：head = [7,7,7,7], val = 7 * 输出：[] * * * * * 提示： * * * 列表中的节点数目在范围 [0, 10^4] 内 * 1 * 0 * * */ // @lc code=start /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { // 头节点 是满足 Node.val == val 的节点，删除头节点, // 但是next节点的值可能也相等，所以循环遍历 while(head != null \u0026amp;\u0026amp; head.val == val){ head = head.next; } if (head == null) { return head; } ListNode cur = head; while (cur.next != null) { if(cur.next.val == val){ cur.next = cur.next.next; } else { cur = cur.next; } } return head; } } // class Solution { // public ListNode removeElements(ListNode head, int val) { // ListNode dummy = new ListNode(0); // dummy.next = head; // ListNode prev = dummy; // ListNode cur = head; // while (cur != null) { // if (cur.val == val) { // prev.next = cur.next; // } else { // prev = cur; // } // cur = cur.next; // } // return dummy.next; // } // } // @lc code=end ","date":"2024-03-30T00:00:00Z","image":"https://example.com/p/203.-remove-linked-list-elements/203_hu5477be140e37c38e9e48439fae2f6b6b_10247729_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/203.-remove-linked-list-elements/","title":"203. Remove Linked List Elements"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 /* * @lc app=leetcode.cn id=59 lang=java * * [59] 螺旋矩阵 II * * https://leetcode.cn/problems/spiral-matrix-ii/description/ * * algorithms * Medium (71.30%) * Likes: 1271 * Dislikes: 0 * Total Accepted: 407.8K * Total Submissions: 573.1K * Testcase Example: \u0026#39;3\u0026#39; * * 给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 * * * * 示例 1： * * * 输入：n = 3 * 输出：[[1,2,3],[8,9,4],[7,6,5]] * * * 示例 2： * * * 输入：n = 1 * 输出：[[1]] * * * * * 提示： * * * 1 * * * 思路：初始化一个n*n的矩阵matrix，然后模拟整个由内向外螺旋填入数字的过程： * 1.定义当前左右上下边界l,r,t,b。 * 计数赋值的初始值num=1,迭代终止值为 target = n*n; * 2.当num \u0026lt; target时，始终按照从左到右，从上到下，从右到左，从下到上填入顺序循环， * 每次填入后执行： * i.执行num +=1 ,即得到下一个待填入数值 * ii.更新边界, 每次循环前都需向内收缩，避免重复：例如从左到右填入后，上边界需要 t+=1，相当于上边界向内缩1 * 3.使用 num \u0026lt; target, 而不是l\u0026lt;r||t\u0026lt;b作为迭代条件，是为解决当n为奇数时， * 矩阵中心数字无法在迭代过程中被填充的问题。 * 4.最终返回matrix即可。 * * * */ // @lc code=start class Solution { public int[][] generateMatrix(int n) { int [][] matrix = new int[n][n]; int left =0, right = n-1, top = 0, bottom = n-1; int target = n * n, num = 1; while (num \u0026lt;= target ) { //从左到右遍历，行不变为t for(int l = left; l \u0026lt;=right; l++){ matrix[top][l] = num++; } //准备进入下一次循环，从上到下遍历，所以t加一， top++; //列不变为r for(int t = top; t\u0026lt;=bottom; t++){ matrix[t][right] = num++; } //准备下次循环，所以从右到左遍历，所以r减一， right--; //行不变为b for(int r = right; r\u0026gt;=left;r--){ matrix[bottom][r] = num++; } //准备进入下一次循环，从下到上遍历，所以b减一 bottom--; //列不变为l for(int b = bottom; b\u0026gt;=top; b--){ matrix[b][left] = num++; } //准备进入下一次循环，从左到右遍历，所以l加一 left++; } return matrix; } } // @lc code=end ","date":"2024-03-26T00:00:00Z","image":"https://example.com/p/59.-spiral-matrix-ii/59_hu5477be140e37c38e9e48439fae2f6b6b_6958036_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/59.-spiral-matrix-ii/","title":"59. Spiral Matrix II"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 /* * @lc app=leetcode.cn id=209 lang=java * * [209] 长度最小的子数组 * * https://leetcode.cn/problems/minimum-size-subarray-sum/description/ * * algorithms * Medium (46.41%) * Likes: 2088 * Dislikes: 0 * Total Accepted: 727.9K * Total Submissions: 1.6M * Testcase Example: \u0026#39;7\\n[2,3,1,2,4,3]\u0026#39; * * 给定一个含有 n 个正整数的数组和一个正整数 target 。 * * 找出该数组中满足其总和大于等于 target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] * ，并返回其长度。如果不存在符合条件的子数组，返回 0 。 * * * * 示例 1： * * * 输入：target = 7, nums = [2,3,1,2,4,3] * 输出：2 * 解释：子数组 [4,3] 是该条件下的长度最小的子数组。 * * * 示例 2： * * * 输入：target = 4, nums = [1,4,4] * 输出：1 * * * 示例 3： * * * 输入：target = 11, nums = [1,1,1,1,1,1,1,1] * 输出：0 * * * * * 提示： * * * 1 \u0026lt;= target \u0026lt;= 10^9 * 1 \u0026lt;= nums.length \u0026lt;= 10^5 * 1 \u0026lt;= nums[i] \u0026lt;= 10^5 * * * * * 进阶： * * * 如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。 * * * * 思路：滑动窗口 * 快慢指针移动形成滑动窗口，进行判断窗口值之和是否满足条件，再通过快慢指针移动推动滑动窗口 */ // @lc code=start class Solution { public int minSubArrayLen(int target, int[] nums) { int reslut = Integer.MAX_VALUE; //滑动窗口数组值之和 int sum = 0; //左边慢指针即滑动窗口起始位置 int slow = 0; //滑动窗口的长度 int subLength =0; //右边快指针即滑动窗口结束位置 for(int fast = 0; fast \u0026lt; nums.length;fast++){ sum += nums[fast]; //当每次循环判断滑动窗口的截断出的数组值之和sum满足条件时， 进行比较并更新滑动窗口长度 subLength， //然后下一次循环，先更新sum，后更新向右移动慢指针， while (sum \u0026gt;= target) { subLength = fast -slow + 1; reslut = Math.min(reslut, subLength ); // sum -= nums[slow++]; //sum -= nums[slow++];注意顺序，即： sum -= nums[slow]; slow ++; } } return reslut == Integer.MAX_VALUE? 0 : reslut; } } // @lc code=end ","date":"2024-03-25T00:00:00Z","image":"https://example.com/p/209.-minimum-size-subarray-sum/209_hu5477be140e37c38e9e48439fae2f6b6b_7955808_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/209.-minimum-size-subarray-sum/","title":"209. Minimum Size Subarray Sum"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 /* * @lc app=leetcode.cn id=977 lang=java * * [977] 有序数组的平方 * * https://leetcode.cn/problems/squares-of-a-sorted-array/description/ * * algorithms * Easy (67.88%) * Likes: 973 * Dislikes: 0 * Total Accepted: 653.4K * Total Submissions: 962.3K * Testcase Example: \u0026#39;[-4,-1,0,3,10]\u0026#39; * * 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 * * * * * * * 示例 1： * * * 输入：nums = [-4,-1,0,3,10] * 输出：[0,1,9,16,100] * 解释：平方后，数组变为 [16,1,0,9,100] * 排序后，数组变为 [0,1,9,16,100] * * 示例 2： * * * 输入：nums = [-7,-3,2,3,11] * 输出：[4,9,9,49,121] * * * * * 提示： * * * 1 10^4 * -10^4 * nums 已按 非递减顺序 排序 * * * * * 进阶： * * * 请你设计时间复杂度为 O(n) 的算法解决本问题 * * 思路： * 相像双指针， * 1.对原数组元素进行平方，同时新建一个数组用于存放结果值 * 2.左指针与右指针对应的元素比较大小，将较大值放入新数组的末尾， * （即每次将比较后较大值放入新数组的末尾并移动新数组下标） * 3.同时将较大值对应的指针向中间方向移动，直到到两个指针相遇 */ // @lc code=start class Solution { public int[] sortedSquares(int[] nums) { int [] reslut = new int[nums.length]; int left = 0; int right = nums.length -1; int index = nums.length -1; //square for(int i =0; i\u0026lt;= right;i++ ){ nums[i] = nums[i] * nums[i]; } //左右相向双指针，比较对应元素大小 while (left \u0026lt;= right) { if (nums[left] \u0026lt;= nums[right]) { reslut[index--] =nums[right]; right--; } else if(nums[left] \u0026gt; nums[right]){ reslut[index--] =nums[left]; left++; } } return reslut; } } // @lc code=end ","date":"2024-03-25T00:00:00Z","image":"https://example.com/p/977.-squares-of-a-sorted-array/977_hu5477be140e37c38e9e48439fae2f6b6b_10703687_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/977.-squares-of-a-sorted-array/","title":"977. Squares of a Sorted Array"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 /* * @lc app=leetcode.cn id=27 lang=java * * [27] 移除元素 * * https://leetcode.cn/problems/remove-element/description/ * * algorithms * Easy (59.34%) * Likes: 2181 * Dislikes: 0 * Total Accepted: 1.4M * Total Submissions: 2.4M * Testcase Example: \u0026#39;[3,2,2,3]\\n3\u0026#39; * * 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 * * 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 * * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 * * * * 说明: * * 为什么返回数值是整数，但输出的答案是数组呢? * * 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 * * 你可以想象内部操作如下: * * * // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝 * int len = removeElement(nums, val); * * // 在函数里修改输入数组对于调用者是可见的。 * // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 * for (int i = 0; i \u0026lt; len; i++) { * print(nums[i]); * } * * * * * 示例 1： * * * 输入：nums = [3,2,2,3], val = 3 * 输出：2, nums = [2,2] * 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 * nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。 * * * 示例 2： * * * 输入：nums = [0,1,2,2,3,0,4,2], val = 2 * 输出：5, nums = [0,1,3,0,4] * 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, * 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 * * * * * 提示： * * * 0 \u0026lt;= nums.length \u0026lt;= 100 * 0 \u0026lt;= nums[i] \u0026lt;= 50 * 0 \u0026lt;= val \u0026lt;= 100 * * 思路：in-palce原地移出数组元素， * 方法1.考虑使用相向双指针 * 方法2.考虑使用快慢双指针 */ // @lc code=start class Solution11 { public int removeElement(int[] nums, int val) { int left = 0; int right =nums.length -1; int tmp = 0; while (left \u0026lt;= right) { if(nums[left] == val){ tmp = nums[left]; nums[left] = nums[right]; nums[right] = tmp; right--; } else { left++; } } return left; } } class Solution12 { public int removeElement(int[] nums, int val) { int left = 0; int right =nums.length -1; // int tmp = 0; while (left \u0026lt;= right) { if(nums[left] == val){ // tmp = nums[left]; //直接用右边的值覆盖左边的值 nums[left] = nums[right]; // nums[right] = tmp; right--; } else { left++; } } return left; } } class Solution { public int removeElement(int[] nums, int val) { //快指针: 寻找新数组的元素，新数组就是不含有目标元素的数组，所以一直先右移动，遇到相同元素时，继续走； // 遇到不同元素时， 交换快慢指针对应数组的元素，从而实现将新元素向左移动 //慢指针: 用于收集新元素，指向更新 新数组下标的位置，所以遇到相同元素时，不移动； // 遇到不同元素时右移一步 int slowPointer = 0; for(int fastPointer = 0; fastPointer\u0026lt; nums.length; fastPointer++){ if(nums[fastPointer] != val){ nums[slowPointer] = nums[fastPointer]; slowPointer++; } } return slowPointer; } } // @lc code=end ","date":"2024-03-23T00:00:00Z","image":"https://example.com/p/27.-remove-element/27_hu5477be140e37c38e9e48439fae2f6b6b_9247318_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/27.-remove-element/","title":"27. Remove Element"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * @lc app=leetcode.cn id=704 lang=java * * [704] 二分查找 * * https://leetcode.cn/problems/binary-search/description/ * * algorithms * Easy (55.14%) * Likes: 1551 * Dislikes: 0 * Total Accepted: 1.2M * Total Submissions: 2.2M * Testcase Example: \u0026#39;[-1,0,3,5,9,12]\\n9\u0026#39; * * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 * target，如果目标值存在返回下标，否则返回 -1。 * * * 示例 1: * * 输入: nums = [-1,0,3,5,9,12], target = 9 * 输出: 4 * 解释: 9 出现在 nums 中并且下标为 4 * * * 示例 2: * * 输入: nums = [-1,0,3,5,9,12], target = 2 * 输出: -1 * 解释: 2 不存在 nums 中因此返回 -1 * * * * * 提示： * * * 你可以假设 nums 中的所有元素是不重复的。 * n 将在 [1, 10000]之间。 * nums 的每个元素都将在 [-9999, 9999]之间。 * * 思路：排序数组找target，可以使用单指针进行二分搜索 */ // @lc code=start class Solution { public int search(int[] nums, int target) { int left = 0; int right = nums.length -1; while (left \u0026lt;= right) { int middle = left + (right -left)/2; //target在左区间 if(target \u0026lt; nums[middle]){ //middle指针下标需要向左边移动时，避免2个元素数组的case下标不移动，所以需要-1 right = middle -1; } else if(target \u0026gt; nums[middle]){ //target在右区间 //同理，middle指针向右移动时，下标需要+1， left = middle +1; } else{ return middle; } } return -1; } } // @lc code=end ","date":"2024-03-23T00:00:00Z","image":"https://example.com/p/704.-binary-search/704_hu5477be140e37c38e9e48439fae2f6b6b_6288324_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/704.-binary-search/","title":"704. Binary Search"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 /* * @lc app=leetcode.cn id=509 lang=java * * [509] 斐波那契数 * * https://leetcode.cn/problems/fibonacci-number/description/ * * algorithms * Easy (65.98%) * Likes: 745 * Dislikes: 0 * Total Accepted: 674.9K * Total Submissions: 1M * Testcase Example: \u0026#39;2\u0026#39; * * 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： * * * F(0) = 0，F(1) = 1 * F(n) = F(n - 1) + F(n - 2)，其中 n \u0026gt; 1 * * * 给定 n ，请计算 F(n) 。 * * * * 示例 1： * * * 输入：n = 2 * 输出：1 * 解释：F(2) = F(1) + F(0) = 1 + 0 = 1 * * * 示例 2： * * * 输入：n = 3 * 输出：2 * 解释：F(3) = F(2) + F(1) = 1 + 1 = 2 * * * 示例 3： * * * 输入：n = 4 * 输出：3 * 解释：F(4) = F(3) + F(2) = 2 + 1 = 3 * * * * * 提示： * * * 0 \u0026lt;= n \u0026lt;= 30 * * * 思路：动态规划， * 1.定义dp数组 * 2.初始化dp数组的初始值， * 3.写出递推公式 * 4.选择递推顺序 * 5.打印递推数组 * * 注意：n\u0026lt;2的边界条件需要额外处理 */ // @lc code=start class Solution { public int fib(int n) { //注意处理边界条件 if(n\u0026lt;2) return n; int[] fib = new int[n+1]; fib[0]= 0; fib[1]= 1; for(int i =2; i \u0026lt;=n ;i++){ fib[i] = fib[i-1]+fib[i-2]; // System.out.println(\u0026#34;fib[n]:\u0026#34;+fib[n]); } return fib[n]; } } // @lc code=end ","date":"2024-03-22T00:00:00Z","image":"https://example.com/p/509.-fibonacci-number/509_hu5477be140e37c38e9e48439fae2f6b6b_9999474_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/509.-fibonacci-number/","title":"509. Fibonacci Number"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * @lc app=leetcode.cn id=70 lang=java * * [70] 爬楼梯 * * https://leetcode.cn/problems/climbing-stairs/description/ * * algorithms * Easy (54.41%) * Likes: 3474 * Dislikes: 0 * Total Accepted: 1.4M * Total Submissions: 2.6M * Testcase Example: \u0026#39;2\u0026#39; * * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 * * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ * * * * 示例 1： * * * 输入：n = 2 * 输出：2 * 解释：有两种方法可以爬到楼顶。 * 1. 1 阶 + 1 阶 * 2. 2 阶 * * 示例 2： * * * 输入：n = 3 * 输出：3 * 解释：有三种方法可以爬到楼顶。 * 1. 1 阶 + 1 阶 + 1 阶 * 2. 1 阶 + 2 阶 * 3. 2 阶 + 1 阶 * * * * * 提示： * * * 1 \u0026lt;= n \u0026lt;= 45 * * */ // @lc code=start class Solution { public int climbStairs(int n) { if(n\u0026lt;=2){ return n; } int []dp = new int[n +1]; dp[1]= 1; dp[2]= 2; //注意下标index开始于i=3 for(int i =3; i\u0026lt;=n; i++){ dp[i] = dp[i-2] +dp[i-1]; // System.out.println(\u0026#34;dp[i]\u0026#34;+ \u0026#34;i:\u0026#34;+ i+\u0026#34;:\u0026#34;+dp[i]); } return dp[n]; } } // @lc code=end ","date":"2024-03-22T00:00:00Z","image":"https://example.com/p/70.-climbing-stairs/70_hu5477be140e37c38e9e48439fae2f6b6b_10700263_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/70.-climbing-stairs/","title":"70. Climbing Stairs"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 /* * @lc app=leetcode.cn id=746 lang=java * * [746] 使用最小花费爬楼梯 * * https://leetcode.cn/problems/min-cost-climbing-stairs/description/ * * algorithms * Easy (66.29%) * Likes: 1455 * Dislikes: 0 * Total Accepted: 416K * Total Submissions: 626.5K * Testcase Example: \u0026#39;[10,15,20]\u0026#39; * * 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。 * * 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。 * * 请你计算并返回达到楼梯顶部的最低花费。 * * * * 示例 1： * * * 输入：cost = [10,15,20] * 输出：15 * 解释：你将从下标为 1 的台阶开始。 * - 支付 15 ，向上爬两个台阶，到达楼梯顶部。 * 总花费为 15 。 * * * 示例 2： * * * 输入：cost = [1,100,1,1,1,100,1,1,100,1] * 输出：6 * 解释：你将从下标为 0 的台阶开始。 * - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。 * - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。 * - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。 * - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。 * - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。 * - 支付 1 ，向上爬一个台阶，到达楼梯顶部。 * 总花费为 6 。 * * * * * 提示： * * * 2 \u0026lt;= cost.length \u0026lt;= 1000 * 0 \u0026lt;= cost[i] \u0026lt;= 999 * * * * 思路：动态规划， * 先1.定义dp数组 * 2.初始化dp数组的初始值， * 3.写出递推公式 * 4.选择递推顺序 * 5.打印递推数组 */ // @lc code=start class Solution { public int minCostClimbingStairs(int[] cost) { //定义dp数组 int[] dp = new int [cost.length +1]; //初始化dp初始值，可以下标为0或1的台阶开始，因此初始值均为0 dp[0]= 0; dp[1]= 0; //1.写出递推公式dp[i] = Math.min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2]); //2.选择递推顺序，进行循环递推求解 for(int i = 2; i\u0026lt;= cost.length; i++){ dp[i] = Math.min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2]); //打印递推值 // System.out.println(dp[i]); } return dp[cost.length]; } } // @lc code=end ","date":"2024-03-22T00:00:00Z","image":"https://example.com/p/746.-min-cost-climbing-stairs/746_hu3d8040dde552413e254984f4d0fd0a1d_11887603_120x120_fill_box_smart1_3.png","permalink":"https://example.com/p/746.-min-cost-climbing-stairs/","title":"746. Min Cost Climbing Stairs"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 /* * @lc app=leetcode id=784 lang=java * * [784] Letter Case Permutation * * https://leetcode.com/problems/letter-case-permutation/description/ * * algorithms * Medium (74.08%) * Likes: 4588 * Dislikes: 154 * Total Accepted: 294.9K * Total Submissions: 397.8K * Testcase Example: \u0026#39;\u0026#34;a1b2\u0026#34;\u0026#39; * * Given a string s, you can transform every letter individually to be * lowercase or uppercase to create another string. * * Return a list of all possible strings we could create. Return the output in * any order. * * * Example 1: * * * Input: s = \u0026#34;a1b2\u0026#34; * Output: [\u0026#34;a1b2\u0026#34;,\u0026#34;a1B2\u0026#34;,\u0026#34;A1b2\u0026#34;,\u0026#34;A1B2\u0026#34;] * * * Example 2: * * * Input: s = \u0026#34;3z4\u0026#34; * Output: [\u0026#34;3z4\u0026#34;,\u0026#34;3Z4\u0026#34;] * * * * Constraints: * * * 1 \u0026lt;= s.length \u0026lt;= 12 * s consists of lowercase English letters, uppercase English letters, and * digits. * * * \u0026gt;思路分析： 这一类搜索问题是在一个隐式的树上进行的搜索问题，即「树形问题」。解决这一类问题， 先画出递归树是十分重要的，可以帮助打开思路 ，然后看着图形把代码写出来； 这个问题所求的解，是这棵树的叶子结点上的值。因此，可以使用深度优先遍历，收集 所有 叶子结点的值，深度优先遍历用于搜索也叫回溯算法； 回溯算法因为有回头的过程，因此其显著特征是 状态重置。回溯算法的入门问题是「力扣」第 46 题：全排列）。 由于集合元素字母只有大写，小写之分，那么结果树为二叉树，所以不需要用for循环去遍历集合元素 大小写转换： 我们发现大写字符与其对应的小写字符的 ASCII 的差为 32，32 这个值如果敏感的话，它是 2^5 ，在编程语言中，可以表示为 1 \u0026lt;\u0026lt; 5。而 变换大小写这件事等价于： 如果字符是小写字符，减去 32 得到大写字符； 如果字符是大写字符，加上 32 得到小写字符。 而这两者合并起来，就是给这个字符做一次不进位的加法，即异或上 1 \u0026lt;\u0026lt; 5。 */ // @lc code=start import java.util.ArrayList; class Solution { public List\u0026lt;String\u0026gt; letterCasePermutation(String s) { List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); char[]charArray = s.toCharArray(); backTrack(charArray,0,result); return result; } public void backTrack(char[]charArray, Integer index,List\u0026lt;String\u0026gt; result ){ if(charArray.length == index){ result.add(new String(charArray)); return; } backTrack(charArray, index+1, result); if(Character.isLetter(charArray[index])){ /* 大小寫轉換 注意：char[]charArray 是基本数据类型，所以是值传递，即传递的是副本 ，所以数组中的某个元素进行大小写转换后，并不会影响原始数组的值， 实际上每一层是由系统调用栈保存的，那么就不用再写额外的常规的“状态重置”操作 **/ charArray[index] ^= 1\u0026lt;\u0026lt;5; backTrack(charArray, index+1,result); } } } // @lc code=end ","date":"2024-03-06T00:00:00Z","image":"https://example.com/p/784.letter-case-permutation/784_hu606ca62585253a2e41ef4f76e0603ca2_5079664_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/784.letter-case-permutation/","title":"784.Letter Case Permutation"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 /* * @lc app=leetcode id=46 lang=java * * [46] Permutations * * https://leetcode.com/problems/permutations/description/ * * algorithms * Medium (77.71%) * Likes: 18602 * Dislikes: 313 * Total Accepted: 2M * Total Submissions: 2.5M * Testcase Example: \u0026#39;[1,2,3]\u0026#39; * * Given an array nums of distinct integers, return all the possible * permutations. You can return the answer in any order. * * * Example 1: * Input: nums = [1,2,3] * Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] * Example 2: * Input: nums = [0,1] * Output: [[0,1],[1,0]] * Example 3: * Input: nums = [1] * Output: [[1]] * * * Constraints: * * * 1 \u0026lt;= nums.length \u0026lt;= 6 * -10 \u0026lt;= nums[i] \u0026lt;= 10 * All the integers of nums are unique. * * */ // @lc code=start import java.util.ArrayList; import java.util.List; class Solution { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permute(int[] nums) { List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); backTrack(nums, path); return result; } public void backTrack(int[] nums, List\u0026lt;Integer\u0026gt; path){ if(nums.length == path.size()){ result.add(new ArrayList\u0026lt;\u0026gt;(path)); return; } for(int i = 0 ; i \u0026lt; nums.length; i++){ if(!path.contains(nums[i])){ path.add(nums[i]); backTrack(nums, path); path.removeLast(); } } } } // class Solution { // List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); // public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permute(int[] nums) { // List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); // int len = nums.length; // boolean [] used = new boolean[len]; // backTrack(nums, path, used); // return result; // } // public void backTrack(int[] nums, // List\u0026lt;Integer\u0026gt; path,boolean [] used ){ // if(nums.length == path.size()){ // result.add(new ArrayList\u0026lt;\u0026gt;(path)); // return; // } // for(int i = 0 ; i \u0026lt; nums.length; i++){ // if(!used[i]){ // path.add(nums[i]); // used[i] = true; // backTrack(nums, path, used); // used[i] = false; // path.removeLast(); // } // } // } // } // class Main { // public static void main(String[] args) { // // Create a new Solution instance // Solution solution = new Solution(); // // Create a test case // int[] nums = {1, 2, 3}; // // Get the answer // boolean answer = solution.permute(nums); // // Print the answer // System.out.println(answer); // } // } // @lc code=end ","date":"2024-03-05T00:00:00Z","image":"https://example.com/p/46.permutations/46_hu53d701c2791f7bf43c897940a94a4d78_6016204_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/46.permutations/","title":"46.Permutations"},{"content":" 思路：这个解决方案结合了Permutations和Subsets II的思想。当输入数组中存在重复元素时，我们首先对输入数组进行排序，然后只有在以下情况下选择元素：它是第一个要选择的元素，它与前一个元素不同，或者它与前一个元素相同，但前一个元素也已经被选择。其余的解决方案遵循与没有重复元素的排列相同的逻辑，具有相同的时间和空间复杂度。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 /* * @lc app=leetcode id=47 lang=java * * [47] Permutations II * * https://leetcode.com/problems/permutations-ii/description/ * * algorithms * Medium (58.51%) * Likes: 8373 * Dislikes: 139 * Total Accepted: 893.1K * Total Submissions: 1.5M * Testcase Example: \u0026#39;[1,1,2]\u0026#39; * Given a collection of numbers, nums, that might contain duplicates, return * all possible unique permutations in any order. * * * Example 1: * * * Input: nums = [1,1,2] * Output: * [[1,1,2], * ⁠[1,2,1], * ⁠[2,1,1]] * * * Example 2: * * * Input: nums = [1,2,3] * Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] * * * * Constraints: * * * 1 \u0026lt;= nums.length \u0026lt;= 8 * -10 \u0026lt;= nums[i] \u0026lt;= 10 * * */ // @lc code=start import java.util.Arrays; class Solution { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permuteUnique(int[] nums) { List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); int len = nums.length; Arrays.sort(nums); boolean [] used = new boolean[len]; backTrack(nums, path, used); return result; } public void backTrack(int[] nums, List\u0026lt;Integer\u0026gt; path,boolean [] used ){ if(nums.length == path.size()){ result.add(new ArrayList\u0026lt;\u0026gt;(path)); return; } for(int i = 0 ; i \u0026lt; nums.length; i++){ //然后只有在以下情况下选择元素：它沒被選擇過。它是第一个要选择的元素，它与前一个元素不同，或者它与前一个元素相同，但前一个元素也已经被选择。 if(!used[i] \u0026amp;\u0026amp; (i==0 || nums[i] != nums[i-1] || used[i-1])){ path.add(nums[i]); used[i] = true; backTrack(nums, path, used); used[i] = false; path.removeLast(); } } } } // class Solution2 { // List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); // public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permuteUnique(int[] nums) { // List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); // int len = nums.length; // boolean [] used = new boolean[len]; // backTrack(nums, path, used); // List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; deduped = result.stream() // .distinct() // .toList(); // return deduped; // } // public void backTrack(int[] nums, // List\u0026lt;Integer\u0026gt; path,boolean [] used ){ // if(nums.length == path.size()){ // result.add(new ArrayList\u0026lt;\u0026gt;(path)); // return; // } // for(int i = 0 ; i \u0026lt; nums.length; i++){ // if(!used[i]){ // path.add(nums[i]); // used[i] = true; // backTrack(nums, path, used); // used[i] = false; // path.removeLast(); // } // } // } // } // @lc code=end ","date":"2024-03-05T00:00:00Z","image":"https://example.com/p/47.permutations-ii/47_hu5477be140e37c38e9e48439fae2f6b6b_9032782_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/47.permutations-ii/","title":"47.Permutations-ii"},{"content":"時隔四年，故地重游。\n到達東京成田國際機場後，直奔國立西洋藝術博物館，幸運的事趕在閉館的前一天看到了豐富的藏品 博物館的創建者松方幸次郎先生的畫像。松方先生慷慨地捐贈了大量藝術藏品給博物館 為能登半島募捐 逛完博物館出來，夜幕降臨，皓月當空 ","date":"2024-03-05T00:00:00Z","image":"https://example.com/p/%E6%95%85%E5%9C%B0%E9%87%8D%E6%B8%B8/The%20National%20Museum%20of%20Western%20Art_hu209af62a5c347621b358fca369c6201f_4823951_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/%E6%95%85%E5%9C%B0%E9%87%8D%E6%B8%B8/","title":"故地重游"},{"content":"/*\n@lc app=leetcode id=216 lang=java [216] Combination Sum III https://leetcode.com/problems/combination-sum-iii/description/ algorithms Medium (69.07%) Likes: 5799 Dislikes: 107 Total Accepted: 485.5K Total Submissions: 700.5K Testcase Example: \u0026lsquo;3\\n7\u0026rsquo; Find all valid combinations of k numbers that sum up to n such that the following conditions are true: Only numbers 1 through 9 are used. Each number is used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order. Example 1: Input: k = 3, n = 7 Output: [[1,2,4]] Explanation: 1 + 2 + 4 = 7 There are no other valid combinations. Example 2: Input: k = 3, n = 9 Output: [[1,2,6],[1,3,5],[2,3,4]] Explanation: 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 There are no other valid combinations. Example 3: Input: k = 4, n = 1 Output: [] Explanation: There are no valid combinations. Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 \u0026gt; 1, there are no valid combination. Constraints: 2 \u0026lt;= k \u0026lt;= 9 1 \u0026lt;= n \u0026lt;= 60 */\n思路： 本题就是在[1,2,3,4,5,6,7,8,9]这个集合中找到和为n的k个数的组合。 相对于77. 组合，无非就是多了一个限制，本题是要找到和为n的k个数的组合，而整个集合已经是固定的了[1,\u0026hellip;,9]。 想到这一点了，做过77. 组合之后，本题是简单一些了。 本题k相当于树的深度，9（因为整个集合就是9个数）就是树的宽度。 例如 k = 2，n = 4的话，就是在集合[1,2,3,4,5,6,7,8,9]中求 k（个数） = 2, n（和） = 4的组合。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // @lc code=start import java.util.ArrayList; import java.util.LinkedList; import java.util.ArrayList; import java.util.LinkedList; class Solution { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); LinkedList\u0026lt;Integer\u0026gt; path = new LinkedList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum3(int k, int n) { backTrack( n , k,1,0 ); return result; } public void backTrack(Integer sumTarget, int k, int begin, int sum ){ //剪枝 if(sum \u0026gt; sumTarget){ return; } if(path.size() == k \u0026amp;\u0026amp; sum == sumTarget ){ result.add(new ArrayList\u0026lt;\u0026gt;(path)); return; } //剪枝 i \u0026lt;= 9 - (k -path.size()) +1 for(int i = begin; i \u0026lt;= 9 - (k -path.size()) +1 ; i++){ path.add(i); sum += i; backTrack(sumTarget,k, i+1, sum); path.removeLast(); sum -= i; } } } // @lc code=end ","date":"2024-02-27T00:00:00Z","image":"https://example.com/p/216.combination-sum-iii/216_huee336b0bcb2a7652cd11fea2dee339d9_1429265_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/216.combination-sum-iii/","title":"216.Combination Sum III"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 /* * @lc app=leetcode id=17 lang=java * * [17] Letter Combinations of a Phone Number */ // @lc code=start import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; /* * DFS 深度优先搜素算法 */ // class Solution { // public List\u0026lt;String\u0026gt; letterCombinations(String digits) { // // List\u0026lt;String\u0026gt; phoneNum2String = new ArrayList\u0026lt;String\u0026gt;(Arrays.asList(\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;abc\u0026#34;,\u0026#34;def\u0026#34;,\u0026#34;ghi\u0026#34;,\u0026#34;jkl\u0026#34;,\u0026#34;mno\u0026#34;,\u0026#34;pqrs\u0026#34;,\u0026#34;tuv\u0026#34;,\u0026#34;wxyz\u0026#34;)); // //使用hashMap 可应对异常边界条件，比如输入0,1或者非数字 // Map\u0026lt;Character,String\u0026gt; phoneNum2String = new HashMap\u0026lt;\u0026gt;(){{ // put(\u0026#39;0\u0026#39;, \u0026#34;\u0026#34;); // put(\u0026#39;1\u0026#39;, \u0026#34;\u0026#34;); // put(\u0026#39;2\u0026#39;, \u0026#34;abc\u0026#34;); // put(\u0026#39;3\u0026#39;, \u0026#34;def\u0026#34;); // put(\u0026#39;4\u0026#39;, \u0026#34;ghi\u0026#34;); // put(\u0026#39;5\u0026#39;, \u0026#34;jkl\u0026#34;); // put(\u0026#39;6\u0026#39;, \u0026#34;mno\u0026#34;); // put(\u0026#39;7\u0026#39;, \u0026#34;pqrs\u0026#34;); // put(\u0026#39;8\u0026#39;, \u0026#34;tuv\u0026#34;); // put(\u0026#39;9\u0026#39;, \u0026#34;wxyz\u0026#34;); // }}; // List\u0026lt;String\u0026gt; combinations = new ArrayList\u0026lt;\u0026gt;(); // int index = 0; // //存当前字符串 // StringBuffer current = new StringBuffer(); // //算法：DFS深度优先搜索 / 回溯 实现搜索， // findCombinationsBacktrack(phoneNum2String,combinations,0,digits,current); // return combinations; // } // public void findCombinationsBacktrack(Map\u0026lt;Character,String\u0026gt; phoneNum2String, List\u0026lt;String\u0026gt; combinations ,int index, String digits,StringBuffer current){ // if(index == digits.length()){ // if(index == 0){ // return; // } // combinations.add(current.toString()); // return; // } // String alphaString = phoneNum2String.get(digits.charAt(index)); // for(int i = 0; i\u0026lt;alphaString.length();i++){ // current.append(alphaString.charAt(i)); // findCombinationsBacktrack(phoneNum2String,combinations,index+1,digits,current); // current.deleteCharAt(index); // } // } // } /* * BFS 广度优先搜素算法 */ class Solution { public List\u0026lt;String\u0026gt; letterCombinationsBSF(String digits) { if (digits.length() == 0) return new ArrayList\u0026lt;String\u0026gt;(); String[] d = new String[]{\u0026#34; \u0026#34;, \u0026#34;\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;def\u0026#34;, \u0026#34;ghi\u0026#34;, \u0026#34;jkl\u0026#34;, \u0026#34;mno\u0026#34;, \u0026#34;pqrs\u0026#34;, \u0026#34;tuv\u0026#34;, \u0026#34;wxyz\u0026#34;}; List\u0026lt;String\u0026gt; ans = new ArrayList\u0026lt;\u0026gt;(); ans.add(\u0026#34;\u0026#34;); for (char digit : digits.toCharArray()) { List\u0026lt;String\u0026gt; tmp = new ArrayList\u0026lt;\u0026gt;(); for (String t : ans) { String s = d[Character.getNumericValue(digit)]; for (int i = 0; i \u0026lt; s.length(); ++i) tmp.add(t + s.charAt(i)); } ans = tmp; } return ans; } } /* * debug */ class Main{ public static void main(String[] args) { // Create a new Solution instance Solution solution = new Solution(); // Create a test case String testCase = \u0026#34;23\u0026#34;; // Get the answer List\u0026lt;String\u0026gt; result = solution.letterCombinationsBSF(testCase); // Print the answer System.out.println(result); } } // @lc code=end ","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/17.letter-combinations-of-a-phone-number/","title":"17.letter-combinations-of-a-phone-number"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 /* * @lc app=leetcode id=39 lang=java * * [39] Combination Sum * * https://leetcode.com/problems/combination-sum/description/ * * algorithms * Medium (70.32%) * Likes: 17899 * Dislikes: 367 * Total Accepted: 1.7M * Total Submissions: 2.4M * Testcase Example: \u0026#39;[2,3,6,7]\\n7\u0026#39; * * Given an array of distinct integers candidates and a target integer target, * return a list of all unique combinations of candidates where the chosen * numbers sum to target. You may return the combinations in any order. * * The same number may be chosen from candidates an unlimited number of times. * Two combinations are unique if the frequency of at least one of the chosen * numbers is different. * * The test cases are generated such that the number of unique combinations * that sum up to target is less than 150 combinations for the given input. * * * Example 1: * * * Input: candidates = [2,3,6,7], target = 7 * Output: [[2,2,3],[7]] * Explanation: * 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple * times. * 7 is a candidate, and 7 = 7. * These are the only two combinations. * * * Example 2: * * * Input: candidates = [2,3,5], target = 8 * Output: [[2,2,2,2],[2,3,3],[3,5]] * * * Example 3: * * * Input: candidates = [2], target = 1 * Output: [] * * * * Constraints: * * * 1 \u0026lt;= candidates.length \u0026lt;= 30 * 2 \u0026lt;= candidates[i] \u0026lt;= 40 * All elements of candidates are distinct. * 1 \u0026lt;= target \u0026lt;= 40 * * * * @param candidates 候选数组 * @param begin 搜索起点 * @param len 冗余变量，是 candidates 里的属性，可以不传 * @param target 每减去一个元素，目标值变小 * @param cur 从根结点到叶子结点的路径，是一个栈 * @param res 结果集列表 参考链接：https://leetcode.cn/problems/combination-sum/solutions/14697/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/ * * 对于所有搜素可行解类型的问题，都可以尝试 “搜索回溯”的方法求解 * solution1 * 深度优先搜索算法 * * * 剪枝提速 根据上面画树形图的经验，如果 target 减去一个数得到负数，那么减去一个更大的树依然是负数，同样搜索不到结果。基于这个想法，我们可以对输入数组进行排序，添加相关逻辑达到进一步剪枝的目的； 排序是为了提高搜索速度，对于解决这个问题来说非必要。但是搜索问题一般复杂度较高，能剪枝就尽量剪枝。实际工作中如果遇到两种方案拿捏不准的情况，都试一下。 * solution2 * 1 先排序，剪枝 * 2 再使用深度优先搜索算法 */ // @lc code=start import java.lang.reflect.Array; import java.util.ArrayList; import java.util.Arrays; import java.util.Deque; class Solution1 { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations = new ArrayList\u0026lt;\u0026gt;(); int length = candidates.length; Deque\u0026lt;Integer\u0026gt; cur = new ArrayDeque\u0026lt;\u0026gt;(); if(length==0){ return combinations; } dfs(candidates,target,0,length,combinations,cur); return combinations; } public void dfs(int[] candidates, int target, int begin, int length, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations, Deque\u0026lt;Integer\u0026gt; cur ){ if(target \u0026lt;0){ return; } if(target == 0){ combinations.add(new ArrayList(cur)); return; } // 重点理解这里从 begin 开始搜索的语意 for (int i = begin; i \u0026lt; length; i++){ cur.addLast(candidates[i]); // 注意：由于每一个元素可以重复使用，下一轮搜索的起点依然是 i，而不是i+1，这里非常容易弄错 dfs(candidates,target-candidates[i], i, length,combinations,cur); // 状态重置 cur.removeLast(); } } } class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations = new ArrayList\u0026lt;\u0026gt;(); int length = candidates.length; // 排序是剪枝的前提 Arrays.sort(candidates); Deque\u0026lt;Integer\u0026gt; cur = new ArrayDeque\u0026lt;\u0026gt;(); if(length==0){ return combinations; } dfs(candidates,target, 0, length,combinations,cur); return combinations; } public void dfs(int[] candidates, int target, int begin, int length, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations, Deque\u0026lt;Integer\u0026gt; cur ){ // 由于进入更深层的时候，小于 0 的部分被剪枝，因此递归终止条件值只判断等于 0 的情况 if(target == 0){ combinations.add(new ArrayList(cur)); return; } for (int i = begin; i \u0026lt; length; i++){ if(target \u0026lt; candidates[i]) { break; } cur.addLast(candidates[i]); dfs(candidates,target-candidates[i], i, length,combinations,cur); cur.removeLast(); } } } // @lc code=end ","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/39.combination-sum/","title":"39.combination-sum"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 /* * @lc app=leetcode id=40 lang=java * * [40] Combination Sum II * * https://leetcode.com/problems/combination-sum-ii/description/ * * algorithms * Medium (53.88%) * Likes: 9859 * Dislikes: 261 * Total Accepted: 861.2K * Total Submissions: 1.6M * Testcase Example: \u0026#39;[10,1,2,7,6,1,5]\\n8\u0026#39; * * Given a collection of candidate numbers (candidates) and a target number * (target), find all unique combinations in candidates where the candidate * numbers sum to target. * * Each number in candidates may only be used once in the combination. * * Note: The solution set must not contain duplicate combinations. * * * Example 1: * * * Input: candidates = [10,1,2,7,6,1,5], target = 8 * Output: * [ * [1,1,6], * [1,2,5], * [1,7], * [2,6] * ] * * * Example 2: * * * Input: candidates = [2,5,2,1,2], target = 5 * Output: * [ * [1,2,2], * [5] * ] * * * * Constraints: * * * 1 \u0026lt;= candidates.length \u0026lt;= 100 * 1 \u0026lt;= candidates[i] \u0026lt;= 50 * 1 \u0026lt;= target \u0026lt;= 30 * * * * * solution: * * * @param candidates 候选数组 * @param begin 从候选数组的 begin 位置开始搜索 * @param target 表示剩余，这个值一开始等于 target，基于题目中说明的\u0026#34;所有数字（包括目标数）都是正整数\u0026#34;这个条件 * @param cur 从根结点到叶子结点的路径 * @param combination 最终的所有组合 参考链接：https://leetcode.cn/problems/combination-sum-ii/solutions/14753/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-3/ * * 深度优先搜素 * 注意去重 * */ // @lc code=start import java.util.ArrayList; import java.util.Arrays; import java.util.List; class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum2(int[] candidates, int target) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combination = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; cur = new ArrayList\u0026lt;\u0026gt;(); if(candidates.length == 0){ return combination; } Arrays.sort(candidates); dfs(candidates, target, 0, combination, cur); return combination; } public void dfs(int[] candidates, int target, int begin,List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combination, List\u0026lt;Integer\u0026gt; cur){ if(target==0){ combination.add(new ArrayList\u0026lt;\u0026gt;(cur)); return; } for(int i = begin; i\u0026lt; candidates.length;i++){ //大剪枝，减去 target比candidates[i]小的 if(target\u0026lt;candidates[i]){ return; } //小剪枝，排序后，同一层，相同元素，会产生重复组合，所以进行跳过去重 if(i\u0026gt;begin \u0026amp;\u0026amp; candidates[i] == candidates[i-1] ){ continue; } cur.add(candidates[i]); //注意元素不能重复使用，所以下一层搜索begin从i+1开始搜索 dfs(candidates,target - candidates[i],i+1,combination,cur); cur.remove(cur.size() -1); } } } // @lc code=end ","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/40.combination-sum-ii/","title":"40.combination-sum-ii"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 /* * @lc app=leetcode id=77 lang=java * * [77] Combinations * * https://leetcode.com/problems/combinations/description/ * * algorithms * Medium (69.56%) * Likes: 7886 * Dislikes: 206 * Total Accepted: 822.7K * Total Submissions: 1.2M * Testcase Example: \u0026#39;4\\n2\u0026#39; * * Given two integers n and k, return all possible combinations of k numbers * chosen from the range [1, n]. * * You may return the answer in any order. * * * Example 1: * * * Input: n = 4, k = 2 * Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] * Explanation: There are 4 choose 2 = 6 total combinations. * Note that combinations are unordered, i.e., [1,2] and [2,1] are considered * to be the same combination. * * * Example 2: * * * Input: n = 1, k = 1 * Output: [[1]] * Explanation: There is 1 choose 1 = 1 total combination. * * * * Constraints: * * * 1 \u0026lt;= n \u0026lt;= 20 * 1 \u0026lt;= k \u0026lt;= n * * */ // @lc code=start import java.util.ArrayList; import java.util.List; class Solution1 { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combine(int n, int k) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; cur = new ArrayList\u0026lt;\u0026gt;(); if( k \u0026lt;= 0 || k \u0026gt; n){ return combinations; } dfs(n, k, 1, cur, combinations); return combinations; } public void dfs(int n, int k, int begin, List\u0026lt;Integer\u0026gt; cur, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations){ if(cur.size() == k){ combinations.add(new ArrayList\u0026lt;\u0026gt;(cur)); return; } for(int i = begin; i \u0026lt;= n; i++){ cur.add(i); dfs(n, k, i+1, cur, combinations); cur.remove(cur.size() - 1); } } } class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combine(int n, int k) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; cur = new ArrayList\u0026lt;\u0026gt;(); if( k \u0026lt;= 0 || k \u0026gt; n){ return combinations; } dfs(n, k, 1, cur, combinations); return combinations; } public void dfs(int n, int k, int begin, List\u0026lt;Integer\u0026gt; cur, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinations){ if(cur.size() == k){ combinations.add(new ArrayList\u0026lt;\u0026gt;(cur)); return; } //剪枝條件，搜索的begin边界需要满足 剩余的元素需要足够多，也就是 k - cur.size() \u0026lt;= n-i +1，否者進行剪枝， for(int i = begin; i \u0026lt;= n - (k - cur.size()) +1; i++){ cur.add(i); dfs(n, k, i+1, cur, combinations); cur.remove(cur.size() - 1); } } } // @lc code=end ","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/77.combinations/","title":"77.combinations"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 /* * @lc app=leetcode id=78 lang=java * * [78] Subsets * * https://leetcode.com/problems/subsets/description/ * * algorithms * Medium (76.47%) * Likes: 16199 * Dislikes: 243 * Total Accepted: 1.7M * Total Submissions: 2.2M * Testcase Example: \u0026#39;[1,2,3]\u0026#39; * * Given an integer array nums of unique elements, return all possible subsets * (the power set). * * The solution set must not contain duplicate subsets. Return the solution in * any order. * * * Example 1: * * * Input: nums = [1,2,3] * Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] * * * Example 2: * * * Input: nums = [0] * Output: [[],[0]] * * * * Constraints: * * * 1 \u0026lt;= nums.length \u0026lt;= 10 * -10 \u0026lt;= nums[i] \u0026lt;= 10 * All the numbers of nums are unique. * * * * solution： * 问题拆分成 从n个元素的数组中选者k个元素的素全组合, 再收集所有组合即可 */ // @lc code=start import java.util.ArrayList; class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); for(int k = 0; k \u0026lt;= nums.length; k++){ dfs(nums, 0, k, new ArrayList\u0026lt;\u0026gt;(),subsets); } return subsets; } public void dfs(int[] nums, int begin, int k, List\u0026lt;Integer\u0026gt; cur , List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets){ if(k == cur.size()){ subsets.add(new ArrayList\u0026lt;\u0026gt;(cur)); return; } //剪枝优化，由i \u0026lt; n 优化为 // 剩余的元素与下标i(begin)的关系必须满足 k - cur.size() \u0026lt; n -i +1 //下标是从begin是从0开始，所以计算上面\u0026lt;不等式右边需要+1 for(int i = begin; i \u0026lt; nums.length -(k - cur.size() -1); i++){ cur.add(nums[i]); dfs(nums, i+1, k, cur, subsets); cur.remove(cur.size()-1); } } } // @lc code=end ","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/78.subsets/","title":"78.subsets"},{"content":"回溯算法 适用题型：列出所有可能的选择如：组合，切割，部分子集问题，排列，棋盘 e.g. leetcode 17.电话号码组合\n算法模板：\n1 2 3 4 5 6 7 8 9 10 void backstracking(List\u0026lt;Sting\u0026gt; arg1, Integer arg2...){ if(出口的终止条件){ 收集结果； rerun; } for(集合元素){ 处理节点； 调用递归函数backstracking； 回溯操作； } https://www.youtube.com/watch?v=ev5XJ78Fn84\n","date":"2024-01-25T00:00:00Z","permalink":"https://example.com/p/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/","title":"回溯算法"},{"content":"和許多九十年代出生的人一樣，香港黃金時代的經典電影與流行歌曲一路伴隨我成長，走過夢幻的童年。 那時的香港正處於一個如夢似幻歲月流金的年代，是一座讓人對未來的充滿希望，令人著迷的城市。 於是想著有朝一日，定要去拜訪看看。\n工作後，去過很多地方，不知何時起漸漸覺得，和我所在的城市上海比，香港應該也只是另一座摩登都市，反而沒有很想去探索的慾望。 每次出門旅行，總是傾向去異國遊玩。\n去年因為上海lockdown，讓我們錯過了整個春天。 被奪走的美好的東西，總想著找回來，那時候就再想，解封後一定要出趟遠門，去呼吸那新鮮自由的空氣！ 等過完春節回上海，一切都還未從lockdown中緩過神來，考慮到當時情況，香港便成了可選的首站城市。\n2023年農曆正月初十，初春，咋暖還寒，帶著一路興奮與期待，我們坐上了上海飛往香港的飛機！\n下榻的飯店讓人想起了布達佩斯大飯店 元宵節在飯店旁隨機的選到的一家好吃的茶餐廳 參觀香港故宮博物院，看到了許多明清時期的展品，藉此一窺那個時代人們的生活。\n博物院的展品 街邊的好吃的雞蛋仔 在博物院的露臺上俯瞰維港 趕在黃昏日落前，爬上太平山頂，追到了最後一抹夕陽的柔光，這時山間吹來陣陣涼風，拂去白日的些許悶熱，一切令人舒適鬆弛。\n太平山頂的日落 圓月升起，海風吹拂著五千年的維港 夜幕降临，俯瞰华灯初上的城市 未完待續\u0026hellip;\n","date":"2024-01-24T00:00:00Z","image":"https://example.com/p/hong-kong-memories/1_hudef55410758b11b92016a31532bb1813_84464_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/hong-kong-memories/","title":"Hong Kong Memories"},{"content":"如何用 GitHub Pages + Hugo 搭建个人博客 https://cuttontail.blog/blog/create-a-wesite-using-github-pages-and-hugo/#1-%E6%A6%82%E5%BF%B5%E6%90%AD%E5%BB%BA%E6%80%9D%E8%B7%AF%E5%92%8C%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\n概念，搭建思路和运行环境 1.1 什么是 GitHub Pages？ 1.2 什么是 Hugo？ 1.3 网站搭建思路 1.4 运行环境 安装 Hugo 创建 GitHub 仓库 3.1 创建博客源仓库 3.2 创建 GitHub Page 仓库 克隆博客源仓库到本地 使用 Hugo 创建网站 安装和配置 Hugo 主题 6.1 选择 Hugo 主题 6.2 安装 Hugo 主题 6.3 配置 Hugo 主题 用 Hugo 创建文章 本地调试和预览 发布内容 Reference 1. 概念，搭建思路和运行环境# 1.1 什么是 GitHub Pages？# GitHub Pages 是一组静态网页集合（Static Web Page），这些静态网页由 GitHub 托管（host）和发布，所以是 GitHub + Pages。\n1.2 什么是 Hugo？# Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文件。\n1.3 网站搭建思路 创建 2 个 GitHub 仓库 博客源仓库：储存所有 Markdown 源文件（博客内容），和博客中用到的图片等。 GitHub Pages 仓库：储存由 Hugo 从Markdown 文件生成的 HTML 文件。 将在博客源仓库中 Hugo 生成的静态 HTML 文件部署到远端 GitHub Pages 仓库中。\n1.4 运行环境 这篇教程假设你已经： 了解基本的终端命令行知识，如：cd, ls 安装了 Git，并且了解基本的 Git 知识 有一个 GitHub账号 有自己偏好的代码编辑器（我使用的是 VS Code）\n2. 安装 Hugo 这里使用包管理器安装 Hugo，我的操作系统是 Mac OS，所以使用 Homebrew 安装 Hugo。如果你使用的是 Windows 或 Linux，可以根据 Hugo 文档提示的方式安装： Hugo 文档：Install Hugo\nbrew install hugo 查看 Hugo 是否安装成功，显示 Hugo 版本号代表 Hugo 安装成功。\nhugo version\n3. 创建 GitHub 仓库 3.1 创建博客源仓库 命名博客源仓库（whatever you want） 勾选 Public，设置为公开仓库。 勾选添加 README 文件\n3.2 创建 GitHub Page 仓库 命名 GitHub Pages 仓库，这个仓库必须使用特殊的命名格式 \u0026lt;username.github.io\u0026gt;， 是自己的 GitHub 的用户名。 勾选 Public，设置为公开仓库。 勾选添加 README 文件，这会设置 main 分支为仓库的默认主分支，这在后面提交推送博客内容时很重要。\n4. 克隆博客源仓库到本地 打开想要在本地储存项目的文件夹（比如我的项目的文件夹是 project ）\ncd project 克隆博客源仓库到项目文件夹，克隆时使用的 HTTPS 仓库链接在这里查看：\ngit clone https://github.com/miawithcode/cuttontail.git\n5. 使用 Hugo 创建网站 进入刚刚克隆下来的博客源仓库文件夹（比如：我的博客源仓库文件夹名是 cuttontail，则cd cuttontail ），在这个文件夹里用 Hugo 创建一个网站文件夹。\n用 Hugo 创建网站文件夹的命令是 hugo new site 网站名字。(比如，我的命名是 cuttontail-blog)\ncd cuttontail hugo new site cuttontail-blog\n用 Hugo 创建的网站共有 7 个文件夹和 1 个文件，这些文件分别代表：\narchetypes：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版 content：存放内容页面，比如「博客」、「读书笔记」等 layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 data：存放创建站点时 Hugo 使用的其他数据 public：存放 Hugo 生成的静态网页 themes：存放主题文件 config.toml：网站配置文件 6.安装和配置 Hugo 主题 6.1 选择 Hugo 主题# 可以从 Hugo 社区提供的主题中选择一个喜欢的主题应用在自己的网站中。\n6.2 安装 Hugo 主题# 一般在你选择的 Hugo 主题的文档中，都会给出「如何安装这个主题」的命令，比如我选用的 Hugo Bear Blog 的文档中给出：\n打开刚刚用 Hugo 创建的网站文件夹（我的是 cuttontail-blog），在终端粘贴文档中给出的安装命令。\n7. 用 Hugo 创建文章 用 Hugo 创建一篇文章的命令是:\nhugo new xxx.md 用这个命令创建的 Markdown 文件会套用 archetypes 文件夹中的 front matter 模版，在空白处用 Markdown 写入内容。\n其中，draft: true代表这篇文章是一个草稿，Hugo 不会显示草稿，要在主页显示添加的文章，可以设置 draft: false；或者直接删掉这行。\n8. 本地调试和预览# 在发布到网站前可以在本地预览网站或内容的效果，运行命令： hugo server\n也可以在本地编辑 Markdown 文件时，通过 hugo server 来实时预览显示效果。 hugo server 运行成功后，可以在 http://localhost:1313/ 中预览网站\n9. 发布内容 hugo 命令可以将你写的 Markdown 文件生成静态 HTML 网页，生成的 HTML 文件默认存放在 public 文件夹中。\nhugo\n因为hugo 生成的静态 HTML 网页文件默认存放在 public 文件中，所以推送网页内容只需要把 public 中的 HTML 网页文件发布到 GitHub Pages 仓库中。\n将 public 文件夹初始化为 Git 仓库，并设置默认主分支名为 main。这么做的原因是：\nGitHub 创建仓库时生成的默认主分支名是 main 用 git init 初始化 Git 仓库时创建的默认主分支名是 master 将 git init 创建的 master 修改成 main ，再推送给远端仓库 .github.io ，这样才不会报错。 cd public git init -b main\n将 public 文件夹关联远程 GitHub Pages 仓库，使用 GitHub Pages 仓库的 SSH 链接。\n（ ⚠️ 注意：要让 SSH 链接起作用，需要你添加过 SSH Key。如果你没有设置过 SSH Key，请参考 如何在 Mac 上为 GitHub 设置 SSH Key）\nGitHub Pages 仓库的 SSH 链接可以在这里查看：\ngit remote add origin git@github.com:miawithcode/miawithcode.github.io.git\n推送博客源仓库的 public 文件夹中的 HTML 网页文件到 GitHub Pages 仓库 中，在推送仓库内容前要先用 git pull \u0026ndash;rebase origin main 和远端仓库同步，否则会报错。\ngit pull \u0026ndash;rebase origin main git add . git commit -m \u0026ldquo;\u0026hellip;(修改的信息)\u0026rdquo; git push origin main\n转到 GitHub 查看 GitHub Pages 仓库中是否存在刚刚推送的文件，存在则代表推送成功。\n如果你没有设置自定义域名，且把 comfig.toml 文件中的 baseURL 设置为 https://.github.io，就可以在 https://username.github.io 中查看刚刚创建的网站。 ( 👀 我使用的是自定义域名，所以这里用我的自定义域名查看。)\n后续的更新步骤：\n创建你的文章xxx.md 用 hugo server 在本地预览，满意后准备发布。 运行 hugo 命令将 Markdown 文件生成 HTML 文件。 将修改先提交至博客源仓库 git add . git commit -m \u0026ldquo;\u0026hellip;(修改的信息)\u0026rdquo; git push 打开 public 文件 运行： git add . git commit -m \u0026ldquo;\u0026hellip;(修改的信息)\u0026rdquo; git pull \u0026ndash;rebase origin main #可选,如果远端仓库与本地一致，则不需要合并。 git push origin main 如果你使用的是自定义域名，第一次推送成功后，GitHub Pages 仓库会生成 CNAME 文件，所以第二次推送还要再合并一次：git pull \u0026ndash;rebase origin main。后续更新博客就不再需要使用这个命令了。（根据实际情况使用） 发布内容除了手动发布，还能使用 GitHub Action 自动发布。但我认为刚刚搭建好一个网站，立刻就用 GitHub Action 有些 Overwhelming，先学会手动发布，熟练之后再开始使用 GitHub Action 自动发布会比较好。\n10. Reference Creating a Blog with Hugo and Github in 10 minutes Hugo + GitHub Action，搭建你的博客自动发布系统 Hugo - Quick Start\n","date":"2024-01-24T00:00:00Z","image":"https://example.com/p/hello-world/fall_hu5477be140e37c38e9e48439fae2f6b6b_11160813_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/hello-world/","title":"如何用 GitHub Pages + Hugo 搭建个人博客"},{"content":"/*\n@lc app=leetcode id=90 lang=java [90] Subsets II https://leetcode.com/problems/subsets-ii/description/ algorithms Medium (56.68%) Likes: 9237 Dislikes: 265 Total Accepted: 819.4K Total Submissions: 1.4M Testcase Example: \u0026lsquo;[1,2,2]\u0026rsquo; Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. Example 1: Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] Example 2: Input: nums = [0] Output: [[],[0]] Constraints: 1 \u0026lt;= nums.length \u0026lt;= 10 -10 \u0026lt;= nums[i] \u0026lt;= 10 Solution1 思路：使用回溯算法, 对unique数组的全排列的变种 问题拆分成 从n个元素的数组中选者k个元素的素全组合 , 再收集所有子组合时去重即可 https://leetcode.cn/problems/subsets-ii/solutions/1/90-zi-ji-iiche-di-li-jie-zi-ji-wen-ti-ru-djmf/\nSolution2 思路：这道题目和78.子集区别就是集合里有重复元素了，而且求取的子集要去重。 1 注意去重需要先对集合排序 2 画出树形图，从图中可以看出，同一树层上重复取2 就要过滤掉， 同一树枝上就可以重复取2，因为同一树枝上元素的集合才是唯一子集！ */\n// @lc code=start\nimport java.util.ArrayList; import java.util.Arrays; import java.util.List; // Solution1 for循环中遍历中排序，时间复杂度太高 class Solution1 { public List\u0026lt;List\u0026gt; subsetsWithDup(int[] nums) { List\u0026lt;List\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); for(int k = 0; k\u0026lt;= nums.length; k++){ dfs(nums,0,k,new ArrayList\u0026lt;\u0026gt;(),subsets); } return subsets; }\npublic void dfs(int[] nums, int begin, int k, List\u0026lt;Integer\u0026gt; cur , List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets ){ if(k == cur.size()){ //donnot collect dep subset if(isContainTargeList(subsets, new ArrayList\u0026lt;\u0026gt;(cur))){ return; } subsets.add(new ArrayList\u0026lt;\u0026gt;(cur)); return; } for(int i =begin; i \u0026lt;nums.length - (k - cur.size()-1); i++){ cur.add(nums[i]); dfs(nums, i+1, k, cur, subsets); cur.remove(cur.size()-1); } } public boolean isContainTargeList(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets, List\u0026lt;Integer\u0026gt; targeList ){ //因为是组合，不考虑元素顺序，所有需要遍历subsets,判断是否是否包含与targeList相同的组合 for(int i = 0; i\u0026lt; subsets.size();i++){ Collections.sort(subsets.get(i)); Collections.sort(targeList); if(subsets.get(i).equals(targeList)){ return true; } } return false; } }\nclass Solution { List\u0026lt;List\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); List path = new ArrayList\u0026lt;\u0026gt;();\npublic List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsetsWithDup(int[] nums) { Arrays.sort(nums); dfs(nums,0); return subsets; } public void dfs(int[] nums, int begin){ subsets.add(new ArrayList\u0026lt;\u0026gt;(path)); for(int i = begin; i\u0026lt; nums.length; i++ ){ //树的同一层，相同元素需要去重，直接跳过 if(i \u0026gt; begin \u0026amp;\u0026amp; nums[i] == nums[i-1]){ continue; } path.add(nums[i]); dfs(nums, i+1); path.removeLast(); } } }\n// @lc code=end\n","date":"2024-01-23T00:00:00Z","image":"https://example.com/p/90.subsets-ii/90_hu5477be140e37c38e9e48439fae2f6b6b_7746938_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/90.subsets-ii/","title":"90.subsets-ii"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://example.com/p/image-gallery/2_hubce42636ecacc1a380b462f3110efcec_37455_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/image-gallery/","title":"Image gallery"},{"content":" Photo by Codioful on Unsplash\n","date":"2023-08-25T00:00:00Z","image":"https://example.com/p/shortcodes/cover_huec3c3e34981507583e214021ad1b9a4b_12942_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/shortcodes/","title":"Shortcodes"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://example.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://example.com/p/math-typesetting/","title":"Math Typesetting"}]