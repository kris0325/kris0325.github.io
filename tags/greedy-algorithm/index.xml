<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Greedy Algorithm on thatkrisyang</title>
        <link>https://kris0325.github.io/tags/greedy-algorithm/</link>
        <description>Recent content in Greedy Algorithm on thatkrisyang</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>thatkrisyang</copyright>
        <lastBuildDate>Wed, 03 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kris0325.github.io/tags/greedy-algorithm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>greedy algorithm</title>
        <link>https://kris0325.github.io/p/greedy-algorithm/</link>
        <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://kris0325.github.io/p/greedy-algorithm/</guid>
        <description>&lt;img src="https://kris0325.github.io/p/greedy-algorithm/greedy.png" alt="Featured image of post greedy algorithm" /&gt;&lt;img src=&#34;./greedyAlgorithm.png&#34; name=&#34;greedyAlgorithm&#34;&gt;
&lt;h1 id=&#34;什么是贪心&#34;&gt;什么是贪心&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;贪心的本质是选择每一阶段的局部最优，从而达到全局最优。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;贪心的套路什么时候用贪心&#34;&gt;贪心的套路（什么时候用贪心）&lt;/h1&gt;
&lt;p&gt;很多同学做贪心的题目的时候，想不出来是贪心，想知道有没有什么套路可以一看就看出来是贪心。&lt;/p&gt;
&lt;p&gt;说实话贪心算法并没有固定的套路。&lt;/p&gt;
&lt;p&gt;所以唯一的难点就是如何通过局部最优，推出整体最优。&lt;/p&gt;
&lt;p&gt;那么如何能看出局部最优是否能推出整体最优呢？有没有什么固定策略或者套路呢？&lt;/p&gt;
&lt;p&gt;不好意思，也没有！ 靠自己手动模拟，如果模拟可行，就可以试一试贪心策略，如果不可行，可能需要动态规划。&lt;/p&gt;
&lt;p&gt;有同学问了如何验证可不可以用贪心算法呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;贪心一般解题步骤&#34;&gt;贪心一般解题步骤&lt;/h1&gt;
&lt;p&gt;贪心算法一般分为如下四步：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 将问题分解为若干个子问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 找出适合的贪心策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 求解每一个子问题的最优解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 将局部最优解堆叠成全局最优解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个四步其实过于理论化了，我们平时在做贪心类的题目 很难去按照这四步去思考，真是有点“鸡肋”。&lt;/p&gt;
&lt;p&gt;做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;本篇给出了什么是贪心以及大家关心的贪心算法固定套路。&lt;/p&gt;
&lt;p&gt;不好意思了，贪心没有套路，说白了就是常识性推导加上举反例。&lt;/p&gt;
&lt;p&gt;最后给出贪心的一般解题步骤，大家可以发现这个解题步骤也是比较抽象的，不像是二叉树，回溯算法，给出了那么具体的解题套路和模板。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
